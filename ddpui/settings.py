"""
Django settings for ddpui project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
import logging
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration

from datetime import timedelta

from corsheaders.defaults import default_headers
from dotenv import load_dotenv
from ddpui.utils.ddp_logger import setup_logger as setup_ddp_logger
from ddpui.utils.ab_logger import setup_logger as setup_ab_logger

load_dotenv()

sentry_sdk.init(
    dsn=os.getenv("SENTRY_DSN"),
    integrations=[
        DjangoIntegration(),
        # Capture logging records as breadcrumbs (INFO+) and events (WARNING+)
        # Custom logger level overrides this configuration so ideally keep both at same level
        LoggingIntegration(level=logging.INFO, event_level=logging.WARNING),
    ],
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    traces_sample_rate=float(os.getenv("SENTRY_TSR", "1.0")),
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=float(os.getenv("SENTRY_PSR", "1.0")),
    # Enable logging to Sentry
    enable_logs=os.getenv("SENTRY_ENABLE_LOGS", "True") == "True",
    # More info - https://docs.sentry.io/platforms/python/data-management/data-collected/
    send_default_pii=os.getenv("SENTRY_SEND_DEFAULT_PII", "True") == "True",
    # Environment
    environment=os.getenv("ENVIRONMENT", "staging"),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGOSECRET")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "") == "True"


# CORS

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "staging-api.dalgo.org",
    "api.dalgo.org",
    "staging.dalgo.org",
    "dashboard.dalgo.org",
    "staging-app.dalgo.org",
    "insights.dalgo.org",
]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]
CORS_ORIGIN_WHITELIST = (
    "http://localhost:3000",
    "http://host.docker.internal:3000",
    "http://127.0.0.1:3000",
    "https://staging.dalgo.org",
    "https://staging-app.dalgo.org",
    "https://dashboard.dalgo.org",
    "https://insights.dalgo.org",
)
CORS_ALLOW_HEADERS = (*default_headers, "x-dalgo-org")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "ddpui",
    "django_prometheus",
    "django_extensions",
    "channels",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [],
}

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "ddpui.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ddpui.wsgi.application"

ASGI_APPLICATION = "ddpui.asgi.application"  # for websockets


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(os.getenv("REDIS_HOST", "localhost"), os.getenv("REDIS_PORT", "6379"))]
        },
    }
}

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DBNAME"),
        "HOST": os.getenv("DBHOST"),
        "USER": os.getenv("DBUSER"),
        "PASSWORD": os.getenv("DBPASSWORD"),
        "PORT": os.getenv("DBPORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# custom airbyte connectors
AIRBYTE_CUSTOM_SOURCES = {
    "tech4dev/source-kobotoolbox": {
        "name": "KoboToolbox",
        "docker_repository": "tech4dev/source-kobotoolbox",
        "docker_image_tag": "0.3.0",
        "documentation_url": "",
    },
    "tech4dev/source-commcare": {
        "name": "CommCare T4D",
        "docker_repository": "tech4dev/source-commcare",
        "docker_image_tag": "0.3.0",
        "documentation_url": "",
    },
    "tech4dev/source-avni": {
        "name": "Avni",
        "docker_repository": "tech4dev/source-avni",
        "docker_image_tag": "0.2.1",
        "documentation_url": "",
    },
    "tech4dev/source-surveycto": {
        "name": "SurveyCTO T4D",
        "docker_repository": "tech4dev/source-surveycto",
        "docker_image_tag": "0.2.0",
        "documentation_url": "",
    },
    "tech4dev/source-glific": {
        "name": "Glific",
        "docker_repository": "tech4dev/source-glific",
        "docker_image_tag": "0.1.2",
        "documentation_url": "",
    },
    "dhwaniris/airbyte-greythr-connector": {
        "name": "greytHR",
        "docker_repository": "dhwaniris/airbyte-greythr-connector",
        "docker_image_tag": "1.0.4",
        "documentation_url": "",
    },
}

AIRBYTE_SOURCE_BLACKLIST = os.getenv("AIRBYTE_SOURCE_BLACKLIST", "").split(",")

# finally set up the loggers
setup_ddp_logger()
setup_ab_logger()

# Fixtures to seed data
# python3 manage.py loaddata seed/tasks.json
FIXTURE_DIRS = [
    "seed",
]

PRODUCTION = os.getenv("ENVIRONMENT", "") == "production"


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=int(os.getenv("JWT_ACCESS_TOKEN_EXPIRY_HOURS", "12"))),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=int(os.getenv("JWT_REFRESH_TOKEN_EXPIRY_DAYS", "30"))),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "SIGNING_KEY": os.getenv("JWT_SECRET_KEY", SECRET_KEY),
    # ...add other SimpleJWT settings as needed...
}

# Frontend URLs for public sharing and email links
FRONTEND_URL = os.getenv("FRONTEND_URL")
FRONTEND_URL_V2 = os.getenv("FRONTEND_URL_V2")
