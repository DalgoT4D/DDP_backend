# This is the main multistage Dockerfile to build the docker image for the Dalgo backend 
# application based on the official python image and the application code

# Stage 1: Build the application
FROM python:3.10 as build
LABEL Stage="Build"

ENV HOME_DIR=/usr/src/backend
ENV PYTHONUNBUFFERED 1

# Set the working directory to /usr/src/backend
WORKDIR ${HOME_DIR}

COPY requirements.txt /requirements.txt

# install uv. This makes installation of packages faster compared to pip
ADD https://astral.sh/uv/install.sh /install.sh

#Install system dependencies. git is needed because there are some packages that are not available in PyPI
RUN apt-get update && apt-get -y install libpq-dev gcc wget curl git \
    && chmod -R 755 /install.sh && /install.sh && rm /install.sh \
    && set -ex apt-get autoremove -y --purge wget && rm -rf /var/lib/apt/lists/* \
    && /root/.cargo/bin/uv pip install --system --upgrade pip \
    && /root/.cargo/bin/uv pip install --system --no-cache-dir -r /requirements.txt \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean 



RUN mkdir -p ${HOME_DIR}/secrets \
    && mkdir -p ${HOME_DIR}/dbt/dbt \
    && mkdir -p ${HOME_DIR}/ddpui/logs 

RUN python -m venv ${HOME_DIR}/dbt_venv && ${HOME_DIR}/dbt_venv/bin/python -m pip install dbt-core


# Copy the current directory contents into the container at /app
COPY ddpui ${HOME_DIR}/ddpui
COPY manage.py ${HOME_DIR}/manage.py
COPY seed ${HOME_DIR}/seed
COPY Docker/entrypoint.sh /entrypoint.sh
COPY gunicorn-log.conf ${HOME_DIR}/gunicorn-log.conf


# Stage 2 - Runtime
from python:3.10-slim-bookworm as runtime

ARG BUILD_DATE

LABEL maintainer="DalgoT4D"
LABEL org.opencontainers.image.source="https://github.com/DalgoT4D/DDP_backend"
LABEL org.opencontainers.image.licenses="https://github.com/DalgoT4D/DDP_backend?tab=AGPL-3.0-1-ov-file#readme"
LABEL org.opencontainers.image.version="1.0"
LABEL org.opencontainers.image.created=${BUILD_DATE}

ENV HOME_DIR=/usr/src/backend

# Set the working directory to /usr/src/backend
WORKDIR ${HOME_DIR}

# Create user to run the application -m flag creates the home directory -s flag sets the shell -d flag sets the home directory
RUN useradd -ms /bin/bash -d ${HOME_DIR} container_user

COPY --from=build --chown=container_user ${HOME_DIR} ${HOME_DIR}
COPY --from=build --chown=container_user /entrypoint.sh /entrypoint.sh
# This is added to get packages installed in the build stage
COPY --from=build --chown=container_user /usr/local/ /usr/local/

RUN mkdir -p /data

RUN chown container_user:container_user /data
USER container_user

# Make port 8002 available to the world outside this container
EXPOSE 8002

ENTRYPOINT ["bash", "/entrypoint.sh" ]